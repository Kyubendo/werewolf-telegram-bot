import {DeathType, Player} from "../../Game";
import {playerLink} from "../../Utils/playerLink";
import {generateInlineKeyboard} from "../../Game/playersButtons";
import {findPlayer} from "../../Game/findPlayer";
import {Beauty, GuardianAngel, Wolf, FallenAngel, RoleBase} from "../index";

export class SerialKiller extends RoleBase {
    roleName = '–°–µ—Ä–∏–π–Ω—ã–π —É–±–∏–π—Ü–∞ üî™';
    roleIntroductionText = () => `–¢—ã ${this.roleName}.`
    startMessageText = () => `–ù–µ–¥–∞–≤–Ω–æ —Å–±–µ–∂–∞–ª –∏–∑ –ø—Å–∏—Ö—É—à–∫–∏ –∏ —Ç–≤–æ—è —Ü–µ–ª—å —É–±–∏—Ç—å –≤—Å–µ—Ö... ` +
        `–ö–∞–∂–¥—É—é –Ω–æ—á—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É —Ç–µ–ª—É –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!`
    weight = () => -12.5;

    nightActionDone = false

    killMessage = () => ({
        text: {
            toChat: (deadPlayer: Player) => `–≠—Ç–∞ –Ω–æ—á—å –∫–∞–∑–∞–ª–∞—Å—å –¥–æ–≤–æ–ª—å–Ω–æ —Ç–∏—Ö–æ–π –¥–ª—è ${playerLink(deadPlayer)}, ` +
                `–Ω–æ –Ω–µ —Ç—É—Ç-—Ç–æ –±—ã–ª–æ. –ñ–∏—Ç–µ–ª–∏, —Å–æ–±—Ä–∞–≤—à–∏—Å—å, ` +
                `–æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Ä–∞—Å—á–ª–µ–Ω–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ, –Ω–æ, –Ω–∞ —É–¥–∏–≤–ª–µ–Ω–∏–µ, –ø–µ—á–µ–Ω–∏ –Ω–µ –±—ã–ª–æ ` +
                `–Ω–∞ –º–µ—Å—Ç–µ...\n${this.roleName} —Å–Ω–æ–≤–∞ –∞—Ç–∞–∫–æ–≤–∞–ª!\n${playerLink(deadPlayer, true)} –º—ë—Ä—Ç–≤!`,
            toTarget: `–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –ø–æ—Å—Ä–µ–¥–∏ –Ω–æ—á–∏, —Å–ª—ã—à–∞ –∑–ª–æ–≤–µ—â–∏–π —Å–º–µ—Ö, –∫–æ–≥–¥–∞ ${this.roleName} ` +
                '–∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–≤–æ–∏ –æ—Ä–≥–∞–Ω—ã. –¢—ã –º–µ—Ä—Ç–≤(–∞).'
        },
        gif: 'https://media.giphy.com/media/xzW34nyNLcSUE/giphy.gif'
    })


    async handleDeath(killer?: Player, type?: DeathType): Promise<boolean> {
        if (killer?.role instanceof Wolf || killer?.role instanceof FallenAngel) {
            await killer.role.onKilled(this.player, 'wolfCameToSerialKiller');
            return false;
        } else
            return await super.handleDeath(killer, type);
    }

    action = () => {
        SerialKiller.game.bot.sendMessage(
            this.player.id,
            '–í –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Ö–Ω—É—Ç—å –ø–∞—Ä—É-—Ç—Ä–æ–π–∫—É –Ω–æ–∂–µ–π?',
            {
                reply_markup: generateInlineKeyboard(
                    SerialKiller.game.players.filter(player => player !== this.player && player.isAlive)
                )
            }
        ).then(msg => this.actionMsgId = msg.message_id)
    }

    actionResolve = async () => {
        if (!this.targetPlayer) return;

        if (this.targetPlayer.guardianAngel?.role instanceof GuardianAngel) {
            await this.handleGuardianAngel(this.player);
            return;
        } else if (this.targetPlayer.role instanceof Beauty && this.targetPlayer.lover !== this.player)
            await this.player.loveBind(this.targetPlayer);
        else
            await this.targetPlayer.role?.onKilled(this.player);
    }

    handleChoice = (choice?: string) => {
        this.targetPlayer = findPlayer(choice, SerialKiller.game.players);
        this.choiceMsgEditText();
        this.doneNightAction()
    }
}