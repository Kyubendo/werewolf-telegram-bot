import {generateInlineKeyboard} from "../../Game/playersButtons";
import {Player} from "../../Player/Player";
import {findPlayer} from "../../Game/findPlayer";
import {RoleBase} from "../RoleBase";
import {alliesMessage} from "../../Game/findAllies";
import {highlightPlayer} from "../../Utils/highlightPlayer";
import {Traitor} from "../Villagers/Traitor";

export class Wolf extends RoleBase {
    roleName = '–í–æ–ª–∫ üê∫';
    startMessageText = `–¢—ã ${this.roleName}. –°–∫—É—à–∞–π –≤—Å—ë —Å–µ–ª–æ.` + alliesMessage(this.player);
    weight = () => -10;

    killMessageAll = (deadPlayer: Player) => `–ù–æ–º–Ω–æ–º–ù–û–ú–Ω–æ–º–ù–û–ú–ù–û–ú–Ω–æ–º... ${highlightPlayer(deadPlayer)} —Å—ä–µ–ª–∏ –∑–∞–∂–∏–≤–æ!` +
        `\n${highlightPlayer(deadPlayer)} –±—ã–ª(–∞) ${deadPlayer.role?.roleName}.`
    killMessageDead = '–û –Ω–µ—Ç! –¢—ã —Å—ä–µ–¥–µ–Ω(–∞) –≤–æ–ª–∫–æ–º!';

    action = () => {
        if (Wolf.game.stage !== 'night') return;
        Wolf.game.bot.sendMessage(
            this.player.id,
            '–ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Å—ä–µ—Å—Ç—å?',
            {
                reply_markup: generateInlineKeyboard(
                    Wolf.game.players.filter(player => !(player.role instanceof Wolf) && player.isAlive)
                )
            }
        ).then(msg => this.choiceMsgId = msg.message_id)
    }

    actionResolve = () => {
        if (Wolf.game.stage !== 'night' || !this.targetPlayer) return;
        this.targetPlayer.role?.onKilled(this.player);
        this.targetPlayer = undefined
    }

    handleChoice = (choice?: string) => {
        this.targetPlayer = findPlayer(choice, Wolf.game.players);
        this.choiceMsgEditText();
    }

    handleDeath(killer?: Player): boolean {
        const traitor = Wolf.game.players.find(player => player.role instanceof Traitor);
        if (!(Wolf.game.players.filter(player => player.role instanceof Wolf).length - 1) && traitor) {
            traitor.role = new Wolf(traitor);
            traitor.role.previousRole = new Traitor(traitor);
            Wolf.game.bot.sendMessage(
                traitor.id,
                `–¢–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç–∞–ª–æ, —Ç—ã –æ–±—Ä–µ–ª –Ω–æ–≤—ã–π –æ–±–ª–∏–∫, ${traitor.role.previousRole?.roleName}! ` +
                `–¢–µ–ø–µ—Ä—å —Ç—ã ${traitor.role.roleName}!`
            )
        }
        return super.handleDeath(killer);
    }
}
