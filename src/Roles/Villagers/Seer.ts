import {Villager} from "./Villager";
import {Lycan} from "../Wolves and their allies/Lycan";
import {RoleBase} from "../Abstract/RoleBase";
import {Wolf} from "../Wolves and their allies/Wolf";
import {WoodMan} from "./WoodMan";
import {Traitor} from "./Traitor";
import {highlightPlayer} from "../../Utils/highlightPlayer";
import {Player} from "../../Player/Player";
import {ApprenticeSeer} from "./ApprenticeSeer";
import {ForecasterBase} from "../Abstract/ForecasterBase";
import {GameStage} from "../../Game/Game";


export class Seer extends ForecasterBase {
    forecastGameStage:GameStage = 'night';

    roleName = '–ü—Ä–æ–≤–∏–¥–µ—Ü üë≥';
    startMessageText = () => `–¢—ã –ü—Ä–æ–≤–∏–¥–µ—Ü üë≥! –ö–∞–∂–¥—É—é –Ω–æ—á—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã "—É–≤–∏–¥–µ—Ç—å" –µ–≥–æ —Ä–æ–ª—å.`;
    weight = () => 7;

    handleDeath(killer?: Player): boolean {
        const apprenticeSeerPlayer = Seer.game.players.find(player => player.role instanceof ApprenticeSeer);
        if (apprenticeSeerPlayer) {
            const previousRole = apprenticeSeerPlayer.role;
            apprenticeSeerPlayer.role = new Seer(apprenticeSeerPlayer);
            apprenticeSeerPlayer.role.previousRole = previousRole;
            Seer.game.bot.sendMessage(
                apprenticeSeerPlayer.id,
                `${highlightPlayer(this.player)} –±—ã–ª ${apprenticeSeerPlayer.role.roleName}. ` +
                `–¢—ã –∑–∞–Ω—è–ª –µ–≥–æ –º–µ—Å—Ç–æ –ø–æ —Å–ª—É—á–∞—é –µ–≥–æ —Å–º–µ—Ä—Ç–∏.`
            )
        }

        Seer.game.bot.sendMessage(
            Seer.game.chatId,
            `–°–µ–ª—è–Ω–µ –æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç —Ä–∞—Å—á–ª–µ–Ω—ë–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–∫–∏ ${highlightPlayer(this.player)} —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º ` +
            '–∫–æ–ª–æ—Ç—ã—Ö —Ä–∞–Ω. –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∑–≥ –±—ã–ª –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã—Ä–µ–∑–∞–Ω, –±—É–¥—Ç–æ —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å–µ–ª—è–Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏ ' +
            `–ª—É—á—à–∏–µ –º–æ–∑–≥–∏. *${this.roleName}* ‚Äî ${highlightPlayer(this.player)} –º–µ—Ä—Ç–≤.`)
        this.player.isAlive = false;
        return true;
    }

    forecastRoleName = (targetRole: RoleBase) => {
        if (targetRole instanceof Lycan)
            return new Villager(this.player).roleName; // Seer sees Lycan as Villager
        else if (targetRole instanceof Wolf || targetRole instanceof WoodMan)
            return new Wolf(this.player).roleName; // Seer sees all wolves and WoodMan as Wolf
        else if (targetRole instanceof Traitor)
            return Math.random() >= 0.5 ? new Wolf(this.player).roleName : new Villager(this.player).roleName;
        // Seer sees Traitor with random chance - 50% as Wolf and 50% as Villager
        return `—ç—Ç–æ *${targetRole.roleName}*!`;
    }
}
