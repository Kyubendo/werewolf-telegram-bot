import {playerLink} from "../../Utils/playerLink";
import {randomElement} from "../../Utils/randomElement";
import {DeathType, Player} from "../../Game";
import {RoleBase, Seer} from "../";

export class Fool extends Seer {
    roleName = '–î—É—Ä–∞–∫ üÉè';

    forecastRoleName = (targetRole: RoleBase) => {
        if (Math.random() <= .5) {
            const wrongPlayers = Fool.game.players
                .filter(player => player.role?.constructor !== targetRole.constructor
                    && player.isAlive
                    && player !== this.player);
            const wrongRoles = [...new Set(wrongPlayers.map(player => player.role))];
            targetRole = randomElement(wrongRoles) ?? targetRole;
        }
        return `—ç—Ç–æ *${this.seerSees(targetRole)}*!`;
    }

    async handleDeath(killer?: Player, type?: DeathType): Promise<boolean> {
        if (killer?.role && !type) {
            this.player.isAlive = false;
            await Fool.game.bot.sendMessage(
                Fool.game.chatId,
                '–î–µ–Ω—å –Ω–∞—á–∞–ª—Å—è —Å –ø–µ—á–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –í—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ü—Ä–æ–≤–∏–¥... ' +
                `–¢–∞–∫, —Å—Ç–æ–ø! –≠—Ç–æ –∂–µ –Ω–∏–∫–∞–∫–æ–π –Ω–µ –ü—Ä–æ–≤–∏–¥–µ—Ü! –û–Ω... *${this.roleName}*!  ` +
                `–ü–æ–∫–æ–π—Å—è –Ω–µ —Å –º–∏—Ä–æ–º, ${playerLink(this.player)}...`,
            )

            killer?.role?.killMessage && await Fool.game.bot.sendAnimation(
                this.player.id,
                killer?.role?.killMessage().gif,
                {
                    caption: killer.role.killMessage().text.toTarget
                }
            )
            this.player.isAlive = false;
            return true;
        } else
            return super.handleDeath(killer, type);
    }
}
