import {RoleBase} from "../Abstract/RoleBase";
import {generateInlineKeyboard} from "../../Game/playersButtons";
import {randomElement} from "../../Utils/randomElement";
import {highlightPlayer} from "../../Utils/highlightPlayer";
import {Player} from "../../Player/Player";
import {Wolf} from "../WolfTeam/Wolf";

export class WildChild extends RoleBase {
    roleName = '–î–∏–∫–∏–π —Ä–µ–±—ë–Ω–æ–∫ üë∂';
    roleIntroductionText = () => `–¢—ã ${this.roleName}! `
    startMessageText = () => '–í—ã–±–µ—Ä–∏ –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –æ–Ω —Å—Ç–∞–ª —Ç–≤–æ–∏–º "–ø—Ä–∏–º–µ—Ä–æ–º". –ï—Å–ª–∏ –æ–Ω —É–º—Ä–µ—Ç, —Ç—ã —Å—Ç–∞–Ω–µ—à—å –≤–æ–ª–∫–æ–º!'
    weight = () => -1;

    action = () => {
        if (this.targetPlayer?.role) return;

        WildChild.game.bot.sendMessage(
            this.player.id,
            '–ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–∏–º –ø—Ä–∏–º–µ—Ä–æ–º?',
            {
                reply_markup: generateInlineKeyboard(
                    WildChild.game.players.filter(player => player !== this.player && player.isAlive), false)
            }
        ).then(msg => this.choiceMsgId = msg.message_id)
    }

    actionResolve = () => {
        if (!this.targetPlayer?.role) {
            this.targetPlayer = randomElement(WildChild.game.players.filter(player => player !== this.player)) // player.isAlive probably redundant because of roleResolves order
            WildChild.game.bot.editMessageText(
                `–¢—ã –Ω–µ —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä, —Ç–∞–∫ —á—Ç–æ –≤—ã—Å—à–∏–µ —Å–∏–ª—ã —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä ` +
                `–∑–∞ —Ç–µ–±—è ‚Äî ${highlightPlayer(this.targetPlayer)}`,
                {
                    chat_id: this.player.id,
                    message_id: this.choiceMsgId
                }
            )
        }

        if (!this.targetPlayer.role) return;

        const currentTargetHandleDeath = this.targetPlayer.role.handleDeath;
        this.targetPlayer.role.handleDeath = (killer?: Player): boolean => {
            if (!this.targetPlayer) return false;

            this.player.role = new Wolf(this.player, this.player.role);

            WildChild.game.bot.sendMessage(
                this.player.id,
                `–¢–≤–æ–π "–ø—Ä–∏–º–µ—Ä" ${highlightPlayer(this.targetPlayer)} —É–º–µ—Ä! –¢–µ–ø–µ—Ä—å —Ç—ã ${this.roleName}! ` +
                (this.player.role instanceof Wolf && this.player.role.showOtherWolfPlayers())
            )

            return currentTargetHandleDeath(killer);
        }
    }

    handleDeath(killer?: Player): boolean {
        if (killer?.role instanceof Wolf) {
            WildChild.game.bot.sendMessage(
                WildChild.game.chatId,
                '–ù–û–ú–ù–û–ú–ù–û–ú–ù–û–ú! –ü—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é –≤–æ–ª–∫(–∏) ' +
                `—Å—å–µ–ª(–∏) –î–∏–∫–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ ${highlightPlayer(this.player)}, –æ—Å—Ç–∞–≤–∏–≤ –ª–∏—à—å –º–∞–ª–µ–Ω—å–∫–∏–π —Å–∫–µ–ª–µ—Ç–∏–∫. ` +
                '–°–µ–ª—è–Ω–µ –ø–æ–Ω—è–ª–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–æ–ª–∫(–∏) –±–µ–∑–∂–∞–ª–æ—Å—Ç–Ω—ã, —Ä–∞–∑ —Ç–∞–∫ —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ ' +
                '—É–±–∏–≤–∞—é—Ç(–µ—Ç) –±–µ–∑–∑–∞—â–∏—Ç–Ω—ã—Ö –¥–µ—Ç–µ–π.'
            )
        }
        return super.handleDeath(killer);
    }
}
