import {DeathType, Player} from "../../Game";
import {generateInlineKeyboard} from "../../Game/playersButtons";
import {randomElement} from "../../Utils/randomElement";
import {playerLink} from "../../Utils/playerLink";
import {findPlayer} from "../../Game/findPlayer";
import {specialConditionWildChild} from "../../Utils/specialConditionTypes";
import {RoleBase, Wolf} from "../index";

export class WildChild extends RoleBase {
    roleName = '–î–∏–∫–∏–π —Ä–µ–±—ë–Ω–æ–∫ üë∂';
    startMessageText = () => '–í—ã–±–µ—Ä–∏ –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –æ–Ω —Å—Ç–∞–ª —Ç–≤–æ–∏–º "–ø—Ä–∏–º–µ—Ä–æ–º". –ï—Å–ª–∏ –æ–Ω —É–º—Ä–µ—Ç, —Ç—ã —Å—Ç–∞–Ω–µ—à—å –≤–æ–ª–∫–æ–º!'

    nightActionDone = false

    specialCondition: specialConditionWildChild = {
        roleModel: undefined
    }

    stealMessage = () => !!this.specialCondition.roleModel
        && `\n–¢–≤–æ–π "–ø—Ä–∏–º–µ—Ä" ‚Äî ${playerLink(this.specialCondition.roleModel)}.`

    action = () => {
        if (this.specialCondition.roleModel?.role) {
            this.doneNightAction()
            return
        }
        WildChild.game.bot.sendMessage(
            this.player.id,
            '–ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–∏–º –ø—Ä–∏–º–µ—Ä–æ–º?',
            {
                reply_markup: generateInlineKeyboard(
                    WildChild.game.players.filter(player => player !== this.player && player.isAlive), false)
            }
        ).then(msg => this.actionMsgId = msg.message_id)
    }

    actionResolve = async () => {
        if (!this.specialCondition.roleModel?.role) {
            this.specialCondition.roleModel = randomElement(WildChild.game.players
                .filter(player => player !== this.player && player.isAlive)) // player.isAlive probably redundant because of roleResolves order
            if (!this.specialCondition.roleModel) return
            await WildChild.game.bot.editMessageText(
                `–¢—ã –Ω–µ —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä, —Ç–∞–∫ —á—Ç–æ –≤—ã—Å—à–∏–µ —Å–∏–ª—ã —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä ` +
                `–∑–∞ —Ç–µ–±—è ‚Äî ${playerLink(this.specialCondition.roleModel)}`,
                {
                    chat_id: this.player.id,
                    message_id: this.actionMsgId
                }
            )
        }

        if (!this.specialCondition.roleModel.role) return;

        const currentTargetHandleDeath = this.specialCondition.roleModel.role
            .handleDeath.bind(this.specialCondition.roleModel.role);
        this.specialCondition.roleModel.role.handleDeath = async (killer?: Player, type?: DeathType) => {
            await currentTargetHandleDeath(killer, type);

            if (this.specialCondition.roleModel && !(this.player.role instanceof Wolf)) {
                this.player.role = new Wolf(this.player, this.player.role);

                if (!(this.player.role instanceof Wolf)) {
                } else {
                    await WildChild.game.bot.sendMessage(
                        this.player.id,
                        `–¢–≤–æ–π "–ø—Ä–∏–º–µ—Ä" ${playerLink(this.specialCondition.roleModel)} —É–º–µ—Ä! ` +
                        `–¢–µ–ø–µ—Ä—å —Ç—ã ${this.player.role.roleName}!`
                    )

                    await this.player.role.sendAlliesMessage?.(true)

                    this.player.role.findAllies().forEach(player => WildChild.game.bot.sendMessage(
                        player.id,
                        `–ü—Ä–∏–º–µ—Ä –∏–≥—Ä–æ–∫–∞ ${playerLink(this.player)} —É–º–µ—Ä! –¢–µ–ø–µ—Ä—å, –æ–Ω —Å—Ç–∞–ª –≤–æ–ª–∫–æ–º!`
                    ))
                }
            }

            return true;
        }
    }

    async handleDeath(killer?: Player, type?: DeathType) {
        if (killer?.role instanceof Wolf && !type) {
            await WildChild.game.bot.sendMessage(
                WildChild.game.chatId,
                '–ù–û–ú–ù–û–ú–ù–û–ú–ù–û–ú! –ü—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é –≤–æ–ª–∫(–∏) ' +
                `—Å—å–µ–ª(–∏) –î–∏–∫–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ ${playerLink(this.player)}, –æ—Å—Ç–∞–≤–∏–≤ –ª–∏—à—å –º–∞–ª–µ–Ω—å–∫–∏–π —Å–∫–µ–ª–µ—Ç–∏–∫. ` +
                '–°–µ–ª—è–Ω–µ –ø–æ–Ω—è–ª–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–æ–ª–∫(–∏) –±–µ–∑–∂–∞–ª–æ—Å—Ç–Ω—ã, —Ä–∞–∑ —Ç–∞–∫ —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ ' +
                '—É–±–∏–≤–∞—é—Ç(–µ—Ç) –±–µ–∑–∑–∞—â–∏—Ç–Ω—ã—Ö –¥–µ—Ç–µ–π.'
            )
            await WildChild.game.bot.sendAnimation(
                this.player.id,
                killer.role.killMessage().gif,
                {
                    caption: killer.role.killMessage().text.toTarget
                }
            )
            this.player.isAlive = false;
            return true;
        } else
            return super.handleDeath(killer, type);
    }

    handleChoice = (choice?: string) => {
        this.specialCondition.roleModel = findPlayer(choice, WildChild.game.players);
        this.choiceMsgEditText();
        this.doneNightAction()
    }

    choiceMsgEditText = () => RoleBase.game.bot.editMessageText(
        `–í—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç ‚Äî ${this.specialCondition.roleModel
            ? playerLink(this.specialCondition.roleModel)
            : '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'}.`,
        {
            message_id: this.actionMsgId,
            chat_id: this.player.id,
        }
    )
}
