import {highlightPlayer} from "../../Utils/highlightPlayer";
import {DeathType, Player} from "../../Game";
import {RoleBase, Thief} from "../index";

export class Mason extends RoleBase {
    findAllies = () => Mason.game.players.filter(otherPlayer =>
        otherPlayer.role instanceof Mason
        && otherPlayer !== this.player
        && otherPlayer.isAlive
    )

    sendAlliesMessage = async (notify?: boolean): Promise<void> => {
        const allies = this.findAllies();

        if (notify) {
            let notificationText;
            if (this.player.role?.previousRole instanceof Thief && this.player.role.targetPlayer)
                notificationText = `–°—Ç—Ä–∞–Ω–Ω–æ, ${highlightPlayer(this.player)} –ø—Ä–∏—à—ë–ª –Ω–∞ —Å–æ–±—Ä–∞–Ω–∏–µ ` +
                    `–∫–∞–º–µ–Ω—â–∏–∫–æ–≤ –≤–º–µ—Å—Ç–æ ${highlightPlayer(this.player.role.targetPlayer)}! ` +
                    `${highlightPlayer(this.player.role.targetPlayer)} —É–≤–æ–ª–µ–Ω –∑–∞ –ø—Ä–æ–≥—É–ª!`
            else
                notificationText = `${highlightPlayer(this.player)} –ø—Ä–∏—à—ë–ª –Ω–∞ —Å—Ç—Ä–æ–π–∫—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é. ` +
                    `–î–∞, –æ–ø—ã—Ç–∞ —É –Ω–µ–≥–æ –Ω–µ—Ç... –Ω–æ –æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª –∞–∂ 8 –∫–ª–∞—Å—Å–æ–≤! –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–∞–º–µ—â–∏–∫–∞ üéâ!`

            for (const ally of allies) {
                await Mason.game.bot.sendMessage(
                    ally.id,
                    notificationText
                )
            }
        }

        let alliesInfoText: string = '\n'

        if (!allies.length)
            alliesInfoText += '–ù–æ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –æ–¥–∏–Ω –Ω–∞ —Å–º–µ–Ω–µ.'
        else {
            if (allies.length === 1)
                alliesInfoText += '–¢–≤–æ–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ ‚Äî '
            else
                alliesInfoText += '–ö–∞–º–µ–Ω—â–∏–∫–∏: '

            alliesInfoText += allies?.map(ally => highlightPlayer(ally)).join(', ')
        }

        await Mason.game.bot.sendMessage(
            this.player.id,
            alliesInfoText
        )
    }

    roleName = '–ö–∞–º–µ–Ω—â–∏–∫ üë∑';
    roleIntroductionText = () => ''
    startMessageText = () => `–¢–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å, –∫—Ä–æ–º–µ –∫–∞–∫ –∏–¥—Ç–∏ –∏ –ø–∞—Ö–∞—Ç—å –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ, ` +
        `–≤–µ–¥—å —Ç—ã ${this.roleName}.`
    weight = () => {
        const otherMasonsAmount = this.findAllies().length;
        return (otherMasonsAmount ? 3 : 1) + otherMasonsAmount;
    }

    async handleDeath(killer?: Player, type?: DeathType): Promise<boolean> {
        if (killer?.role && !type) {
            await Mason.game.bot.sendMessage(
                Mason.game.chatId,
                `–ü—Ä–æ—Å–Ω—É–≤—à–∏—Å—å, –≤—Å–µ –Ω–∞—Ö–æ–¥—è—Ç —Ç–µ–ª–æ ${highlightPlayer(this.player)} –ø–æ–¥ –≥—Ä—É–¥–æ–π ` +
                `–∫–∞–º–Ω–µ–π, –∫—Ä–æ–≤—å —Ä–∞–∑–±—Ä—ã–∑–≥–∞–Ω–∞ –ø–æ–≤—Å—é–¥—É. *${this.roleName}* –º–µ—Ä—Ç–≤!`
            )

            killer?.role?.killMessage && await Mason.game.bot.sendAnimation(
                this.player.id,
                killer?.role?.killMessage().gif,
                {
                    caption: killer.role.killMessage().text.toTarget
                }
            )
            this.player.isAlive = false;
            return true;
        } else
            return super.handleDeath(killer, type);
    }
}